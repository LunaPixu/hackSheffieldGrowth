<img class="@bg" src="@_Sprite" alt="@_AltText" @onclick="ClickCell" style="cursor: @_CursorPoint" />

@code {
    [Parameter]
    public required int age { get; set; }
    [Parameter]
    public required string bg { get; set; }
    [Parameter]
    public required (int row, int col) coords { get; set; }
    [Parameter]
    public EventCallback<(int row, int col,int newVal)> Clicked { get; set; }

    private string _Sprite = "/images/empty.png";
    private string _AltText = "Empty Space";
    private string _CursorPoint = "default";

    private void RenderTree()
    {
        switch (age) {
            case 1: // seed
                _Sprite = "/images/seed.png";
                _AltText = "Seed";
                _CursorPoint = "default";
                break;
            case 2: // sapling
                _Sprite = "/images/sapling.png";
                _AltText = "Sapling";
                _CursorPoint = "default";
                break;
            case 3: // immature
                _Sprite = "/images/immature.png";
                _AltText = "Immature Tree";
                _CursorPoint = "pointer";
                break;
            case 4: // mature
                _Sprite = "/images/tree.png";
                _AltText = "Tree";
                _CursorPoint = "pointer";
                break;
            case -1: // dead
                _Sprite = "/images/dead.png";
                _AltText = "Dead Tree";
                _CursorPoint = "default";
                break;
            case 0: default: // empty or anomalous
                _Sprite = "/images/empty.png";
                _AltText = "Empty Space";
                _CursorPoint = "pointer";
                break;
    }
  }

  async private Task ClickCell()
  {
    if (age == 0) { // If cell is empty, signal to plant a seed
      await Clicked.InvokeAsync((coords.row, coords.col, 1));
    }
    else if (age == 3 || age == 4) { // If cell has a proper tree, signal to chop it down
      await Clicked.InvokeAsync((coords.row, coords.col, 0));
    }
  }

  // When initialised or updated from parent component, render
  protected override void OnInitialized() => RenderTree();
  protected override void OnParametersSet() => RenderTree();
}